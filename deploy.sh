#!/bin/bash

# Script de d√©ploiement automatis√© pour Vercel
# Classification des Cultures Agricoles - IA Satellite

set -e  # Arr√™ter en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonctions utilitaires
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Banner
echo -e "${GREEN}"
echo "üåæ Classification des Cultures Agricoles - D√©ploiement"
echo "=================================================="
echo -e "${NC}"

# V√©rifications pr√©alables
log_info "V√©rification des pr√©requis..."

# V√©rifier Node.js
if ! command -v node &> /dev/null; then
    log_error "Node.js n'est pas install√©"
    exit 1
fi

NODE_VERSION=$(node --version)
log_success "Node.js version: $NODE_VERSION"

# V√©rifier pnpm
if ! command -v pnpm &> /dev/null; then
    log_warning "pnpm n'est pas install√©, installation en cours..."
    npm install -g pnpm
fi

PNPM_VERSION=$(pnpm --version)
log_success "pnpm version: $PNPM_VERSION"

# V√©rifier Vercel CLI
if ! command -v vercel &> /dev/null; then
    log_warning "Vercel CLI n'est pas install√©, installation en cours..."
    npm install -g vercel
fi

VERCEL_VERSION=$(vercel --version)
log_success "Vercel CLI version: $VERCEL_VERSION"

# Installation des d√©pendances
log_info "Installation des d√©pendances..."
pnpm install --frozen-lockfile

# V√©rification du code
log_info "V√©rification du code avec ESLint..."
if pnpm run lint; then
    log_success "Code v√©rifi√© avec succ√®s"
else
    log_warning "Avertissements ESLint d√©tect√©s, mais d√©ploiement continu√©"
fi

# Tests (si disponibles)
if [ -f "package.json" ] && grep -q '"test"' package.json; then
    log_info "Ex√©cution des tests..."
    if pnpm run test; then
        log_success "Tests pass√©s avec succ√®s"
    else
        log_error "Tests √©chou√©s"
        read -p "Continuer le d√©ploiement malgr√© les tests √©chou√©s? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
fi

# Build de l'application
log_info "Construction de l'application..."
pnpm run build

if [ $? -eq 0 ]; then
    log_success "Build termin√© avec succ√®s"
else
    log_error "√âchec du build"
    exit 1
fi

# V√©rification de la taille du bundle
log_info "V√©rification de la taille du bundle..."
DIST_SIZE=$(du -sh dist 2>/dev/null | cut -f1 || echo "N/A")
log_info "Taille du bundle: $DIST_SIZE"

# V√©rification des fichiers critiques
log_info "V√©rification des fichiers critiques..."
CRITICAL_FILES=("dist/index.html" "dist/assets" "vercel.json" "package.json")

for file in "${CRITICAL_FILES[@]}"; do
    if [ -e "$file" ]; then
        log_success "‚úì $file"
    else
        log_error "‚úó $file manquant"
        exit 1
    fi
done

# Configuration des variables d'environnement
log_info "Configuration des variables d'environnement..."

# V√©rifier si .env.local existe
if [ -f ".env.local" ]; then
    log_success "Fichier .env.local trouv√©"
else
    log_warning "Fichier .env.local non trouv√©, utilisation de .env.example"
    if [ -f ".env.example" ]; then
        cp .env.example .env.local
        log_info "Veuillez configurer les variables dans .env.local"
    fi
fi

# D√©ploiement sur Vercel
log_info "D√©ploiement sur Vercel..."

# Demander le type de d√©ploiement
echo "Type de d√©ploiement:"
echo "1) Production"
echo "2) Preview"
echo "3) Development"
read -p "Choisissez (1-3): " -n 1 -r DEPLOY_TYPE
echo

case $DEPLOY_TYPE in
    1)
        log_info "D√©ploiement en production..."
        vercel --prod --confirm
        ;;
    2)
        log_info "D√©ploiement en preview..."
        vercel --confirm
        ;;
    3)
        log_info "D√©ploiement en d√©veloppement..."
        vercel --confirm
        ;;
    *)
        log_error "Choix invalide"
        exit 1
        ;;
esac

if [ $? -eq 0 ]; then
    log_success "D√©ploiement termin√© avec succ√®s!"
    
    # Obtenir l'URL de d√©ploiement
    DEPLOYMENT_URL=$(vercel ls --limit 1 --json | jq -r '.[0].url' 2>/dev/null || echo "N/A")
    if [ "$DEPLOYMENT_URL" != "N/A" ]; then
        log_success "URL de d√©ploiement: https://$DEPLOYMENT_URL"
    fi
    
    # Tests post-d√©ploiement
    log_info "Tests post-d√©ploiement..."
    
    if [ "$DEPLOYMENT_URL" != "N/A" ]; then
        # Test de disponibilit√©
        if curl -f -s "https://$DEPLOYMENT_URL" > /dev/null; then
            log_success "‚úì Application accessible"
        else
            log_warning "‚ö† Application peut ne pas √™tre imm√©diatement accessible"
        fi
        
        # Test de l'API
        if curl -f -s "https://$DEPLOYMENT_URL/api/health" > /dev/null 2>&1; then
            log_success "‚úì API fonctionnelle"
        else
            log_warning "‚ö† API peut ne pas √™tre imm√©diatement disponible"
        fi
    fi
    
    # Nettoyage
    log_info "Nettoyage des fichiers temporaires..."
    # Garder dist pour debug si n√©cessaire
    
    echo -e "${GREEN}"
    echo "üéâ D√©ploiement termin√© avec succ√®s!"
    echo "=================================="
    echo -e "${NC}"
    
    if [ "$DEPLOYMENT_URL" != "N/A" ]; then
        echo -e "üåê URL: ${BLUE}https://$DEPLOYMENT_URL${NC}"
    fi
    echo -e "üìä Dashboard Vercel: ${BLUE}https://vercel.com/dashboard${NC}"
    echo -e "üìñ Documentation: ${BLUE}README.md${NC}"
    
else
    log_error "√âchec du d√©ploiement"
    exit 1
fi

# Conseils post-d√©ploiement
echo -e "\n${YELLOW}Conseils post-d√©ploiement:${NC}"
echo "‚Ä¢ Configurez les variables d'environnement dans le dashboard Vercel"
echo "‚Ä¢ Ajoutez un domaine personnalis√© si n√©cessaire"
echo "‚Ä¢ Configurez les alertes de monitoring"
echo "‚Ä¢ Testez toutes les fonctionnalit√©s en production"
echo "‚Ä¢ Documentez les changements dans CHANGELOG.md"

log_success "Script de d√©ploiement termin√©!"
